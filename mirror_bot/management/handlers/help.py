from telegram import Update
from telegram.ext import ContextTypes, Application, ConversationHandler, CommandHandler



async def handle_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Sends a detailed help message with a list of available commands and their explanations."""
    help_message = """
üìö *Welcome to Message Mirror Bot Help Center!*

This bot helps you mirror messages between paired Telegram groups. Here's everything you need to know:

üî∞ *Getting Started:*
‚Ä¢ Type /start to begin using the bot
‚Ä¢ The bot needs to be a member in both groups you want to pair
‚Ä¢ Only admins can manage group pairs and settings

üìã *Main Commands:*

1Ô∏è‚É£ *Managing Group Pairs:*
‚Ä¢ `/addpair` - Connect two groups for message mirroring
  _Example: Messages from Group A will appear in Group B and vice versa_
  _Steps:_
  - Click /addpair
  - Select the first group from list of groups or send its username
  - Select the second group from list of groups or send its username
  - Done! Messages will now be mirrored between these groups

‚Ä¢ `/removepair` - Disconnect a pair of groups
  _Steps:_
  - Click /removepair
  - Select the pair you want to disconnect
  - Confirm your choice

‚Ä¢ `/GetPairs` - See all currently connected group pairs
  _Shows you which groups are currently mirroring messages to each other_

2Ô∏è‚É£ *Managing Message Filtering:*
‚Ä¢ `/addwhitelist` - Stop mirroring messages from specific users
  _Useful for:_
  - Bot commands
  - Administrative messages
  - Private announcements
  _Steps:_
  - Click /addwhitelist
  - Send the username or user ID of the person
  - Their messages won't be mirrored anymore

‚Ä¢ `/removewhitelist` - Resume mirroring messages from whitelisted users
  _Steps:_
  - Click /removewhitelist
  - Select the user from the list
  - Their messages will be mirrored again

‚Ä¢ `/Getwhitelist` - View all users whose messages aren't being mirrored

3Ô∏è‚É£ *Settings and Configuration:*
‚Ä¢ `/settings` - Access advanced bot settings
  _Options available:_
  - View admin list
  - Delete old messages to save storage
  - Enable/Disable message mirroring
  - Manage bot configuration

4Ô∏è‚É£ *Other Commands:*
‚Ä¢ `/help` - Show this help message
‚Ä¢ `/exit` - End your current session with the bot

üí° *Tips:*
‚Ä¢ Always ensure the bot has proper admin rights in both groups
‚Ä¢ Use the whitelist for bots and announcement messages
‚Ä¢ Regular users can't see or access admin commands
‚Ä¢ Messages are mirrored instantly when sent

‚ö†Ô∏è *Important Notes:*
‚Ä¢ The bot must be an added to both groups to work
‚Ä¢ Whitelisted users' messages won't be mirrored
‚Ä¢ Media messages (photos, videos, etc.) are also mirrored
‚Ä¢ Reply chains are preserved across groups

‚ùì *Need More Help?*
If you need additional assistance or have questions, please contact the bot administrator.

üîí *Privacy & Security:*
‚Ä¢ The bot only mirrors messages between paired groups
‚Ä¢ Private messages are never mirrored
‚Ä¢ Admin commands are protected
‚Ä¢ Message history is stored securely
"""
    
    await context.bot.send_message(
        chat_id=update.effective_user.id,
        text=help_message,
        parse_mode='Markdown'
    )


async def handle_exit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Ends the current session and sends a session exit message."""
    await context.bot.send_message(
        chat_id=update.effective_user.id,
        text="Your session has been successfully closed. Type /start to begin a new session."
    )
    context.user_data.clear()
    return ConversationHandler.END


def register(application:Application):
    application.add_handler(CommandHandler("help", handle_help))
    application.add_handler(CommandHandler('exit', handle_exit))
